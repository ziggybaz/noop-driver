            NO-OP DRIVER.
    High-Level Goals
-picking up how driver interfaces work i.e:(expose operations and interact with other system components).
-implement robust error-handling in mission critical systems.
-concurrency(dependant on what my driver will do, but by its definition its not supposed to do anything)
-testing and extensibility(don't know why I grouped these together, they don't have any relationship)

        No-op Driver Design.
    1.Driver structure & interface.
interface: should adhere to a trait representing the operations typically performed by a driver i.e( initialization, shutdown/cleanup, read, write, status -> the most basic ops)
    2.Simulating a realistic driver.
2.1.initialization and state management.
track initialization state: ensure the driver can't perform operations unless initialized, uhm duhh!!
internal state tracking: manage counters like read/write ops as well as active/inactive status.

2.2.I/O ops.
supposrt async mode.
*handle different buffer sizes???
test limits (out-of-bounds access)

2.3.Error-handling.
graceful recovery.
simulate errors: try to replicate failure outcomes such as memory constraints and if i decide to make it concurrent, data races & deadlocks(can i really!).

2.4.Resource management.

        Feature Flow.
    Phase1:Initialization & simple ops.
-implement basic driver interface (init, read, write, shutdown)

    Phase2:Error-handlling & concurrency
-add error-handling for uninitialized operations and simulate random failures.
-introduce thread safety and write tests checking for data races and deadlocks**

    Phase3:Resource Management
-try to simulate memory usage and handling resource exhaustion.



    Diagram Flow.
        ______________________
        |Initialization & Ops|
        ______________________
                  |
        _______________________
        |Error-handling & Conc|
        _______________________
                  |
        _______________________
        |Resource Management  |
        _______________________
                  |
        ______________________
        |Extensibility       |
        ______________________


Note: I'll also have to simulate interrupts.



    Fuck Ups.
  Phase1
Fairly straightfoward, since design wasn't a problem just ended up declaring loads of empty structs and definig loads of traits.
Due to the lack of complexity involved here, I tried being too clever and wueh compiler ilinichapa.

this is what I had written initially and to be honest I don't think I know what I was writing:

` fn new(read_process: Box<dyn ReadOperations>, write_process: Box<dyn WriteOperations>) -> Self {
        DriverProcesses {
            initialized: false,
            shut_down: false,
            read_process,
            write_process,
        }
    }`

compiler error message I got:

` pub write_process: Box<dyn WriteOperations>,
   |                            ^^^^^^^^^^^^^^^^^^^ WriteOperations cannot be made into an object
   |
note: for a trait to be "object safe" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>`

after firmly being humbled by the compiler and not willing to put up a fight to find a workaround I reverted to a much simpler implementation using generic types.
i've written this so that when I'm bored I might just reimplement it in this order and fuck around till i make it work.

  Phase2.
robustness is key and to be honest I think it can be more robust.
wrote like 3 different implementations but none of them made me happy including the final draft, will probably need to spend more time tinkering with `std::error::Error`.

  Phase3.
deciding on what the driver ought to do.
went with reading && writing to Buffer. chose this since i would be able to simulate a lot of scenarios such as (buffer overflow, ou-of-bounds-access and etc as I remember more)
wrote a piece of code where the implementation block for the buffersimulator contained the traits and the struct constructor(new), the code did NOT compile. Turns out constructors shouldn't be part of trait
implementations but instead part of the structure itself. this was actually a good find, because for every trait implementation block, i had the same constructor in every one making it horrible to read.

just because I can, decided to make the driver platform specific i.e runs only on(x86_64 linux archs): {
by default when you run `cargo build` it will only build for your host arch if its the above arch if not it will give you a compilation error.
e.g `cargo build --target x8_64-pc-windows-gnu` will not compile. 
}








